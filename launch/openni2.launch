<!-- Entry point for using OpenNI devices -->
<launch>

  <!-- "camera" should uniquely identify the device. All topics are pushed down
       into the "camera" namespace, and it is prepended to tf frame ids. -->
  <arg name="camera" default="camera" />
  <arg name="rgb_frame_id"   default="$(arg camera)_rgb_optical_frame" />
  <arg name="depth_frame_id" default="$(arg camera)_depth_optical_frame" />

  <arg name="device_id" default="#1" />

  <!-- By default, calibrations are stored to file://${ROS_HOME}/camera_info/${NAME}.yaml,
       where ${NAME} is of the form "[rgb|depth]_[serial#]", e.g. "depth_B00367707227042B".
       See camera_info_manager docs for calibration URL details. -->
  <arg name="rgb_camera_info_url"   default="" />
  <arg name="depth_camera_info_url" default="" />

  <!-- Arguments for remapping all device namespaces -->
  <arg name="rgb"              default="rgb" />
  <arg name="ir"               default="ir" />
  <arg name="depth"            default="depth" />

  <!-- Machine -->
  <machine name="localhost" address="localhost" env-loader="/opt/ros/hydro/env.sh"/>
  <arg name="machine"          default="localhost" />

  <!-- Optionally suppress loading the driver nodelet and/or publishing the default tf
       tree. Useful if you are playing back recorded raw data from a bag, or are
       supplying a more accurate tf tree from calibration. -->
  <arg name="load_driver" default="true" />
  <arg name="publish_tf" default="true" />

  <!-- Disable bond topics by default -->
  <arg name="respawn" default="false" />

  <!-- Start nodelet manager in top-level namespace -->
  <arg name="manager" value="$(arg camera)_nodelet_manager" />
  <arg name="debug" default="false" /> <!-- Run manager in GDB? -->
  <include file="$(find openni2_launch)/launch/includes/manager.launch">
    <arg name="name" value="$(arg manager)" />
    <arg name="debug" value="$(arg debug)" />
    <arg name="machine" value="$(arg machine)" />
  </include>

  <!-- Push down all topics/nodelets into "camera" namespace -->
  <group ns="$(arg camera)">

    <!-- Load driver -->
    <include if="$(arg load_driver)"
	     file="$(find openni2_launch)/launch/includes/device.launch">
      <!-- Could really use some syntactic sugar for this -->
      <arg name="manager"               value="/$(arg manager)" /> <!-- Fully resolved -->
      <arg name="device_id"             value="$(arg device_id)" />
      <arg name="rgb_frame_id"          value="$(arg rgb_frame_id)" />
      <arg name="depth_frame_id"        value="$(arg depth_frame_id)" />
      <arg name="rgb_camera_info_url"   value="$(arg rgb_camera_info_url)" />
      <arg name="depth_camera_info_url" value="$(arg depth_camera_info_url)" />
      <arg name="rgb"                   value="$(arg rgb)" />
      <arg name="ir"                    value="$(arg ir)" />
      <arg name="depth"                 value="$(arg depth)" />
      <arg name="respawn"               value="$(arg respawn)" />
    </include>

    <!-- Load standard constellation of processing nodelets -->
    <include file="$(find openni2_launch)/launch/includes/processing.launch">
      <arg name="manager"               value="/$(arg manager)" /> <!-- Fully resolved -->
      <arg name="rgb"                   value="$(arg rgb)" />
      <arg name="ir"                    value="$(arg ir)" />
      <arg name="depth"                 value="$(arg depth)" />
      <arg name="respawn"               value="$(arg respawn)" />
    </include>

  </group> <!-- camera -->

  <!-- Load reasonable defaults for the relative pose between cameras -->
  <include if="$(arg publish_tf)"
	   file="$(find openni2_launch)/launch/kinect_frames.launch">
    <arg name="camera" value="$(arg camera)" />
  </include>

</launch>
